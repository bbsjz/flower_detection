{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      ruleForm: {\n        uname: \"\",\n        password: \"\"\n      },\n      rules: {\n        uname: [{\n          required: true,\n          message: \"用户名不能为空！\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"密码不能为空！\",\n          trigger: \"blur\"\n        }]\n      },\n      loading: false // 是否显示加载动画\n    };\n  },\n\n  methods: {\n    submitForm(formName) {\n      // 验证表单中的账号密码是否有效，因为在上面rules中定义为了必填 required: true\n      this.$refs[formName].validate(valid => {\n        // 点击登录后，让登录按钮开始转圈圈（展示加载动画）\n        this.loading = true;\n        // 如果经过校验，账号密码都不为空，则发送请求到后端登录接口\n        if (valid) {\n          let _this = this;\n          // 使用 axios 将登录信息发送到后端\n          this.axios({\n            url: \"http://\",\n            // 请求地址\n            method: \"post\",\n            // 请求方法\n            headers: {\n              // 请求头\n              \"Content-Type\": \"application/json\"\n            },\n            params: {\n              // 请求参数\n              uname: _this.ruleForm.uname,\n              password: _this.ruleForm.password\n            }\n          }).then(res => {\n            // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\n            if (res.data.code === \"0\") {\n              // 当响应的编码为 0 时，说明登录成功\n              // 将用户信息存储到sessionStorage中\n              sessionStorage.setItem(\"userInfo\", JSON.stringify(res.data.data));\n              // 跳转页面到首页\n              this.$router.push('/');\n              //this.$router.push('/home');\n              // 显示后端响应的成功信息\n              this.$message({\n                message: res.data.msg,\n                type: \"success\"\n              });\n              this.$router.push('/');\n            } else {\n              // 当响应的编码不为 0 时，说明登录失败\n              // 显示后端响应的失败信息\n              this.$message({\n                message: res.data.msg,\n                type: \"warning\"\n              });\n            }\n            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\n            _this.loading = false;\n            console.log(res);\n          });\n        } else {\n          // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\n          console.log(\"error submit!!\");\n          this.loading = false;\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["data","ruleForm","uname","password","rules","required","message","trigger","loading","methods","submitForm","formName","$refs","validate","valid","_this","axios","url","method","headers","params","then","res","code","sessionStorage","setItem","JSON","stringify","$router","push","$message","msg","type","console","log","resetForm","resetFields"],"sources":["D:\\大软\\GiantIsopod-Front-main v2.0\\web\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div id=\"login\">\r\n    <el-card class=\"box-card\">\r\n      <h2>登录</h2>\r\n      <el-form\r\n          :model=\"ruleForm\"\r\n          status-icon\r\n          :rules=\"rules\"\r\n          ref=\"ruleForm\"\r\n          label-position=\"left\"\r\n          label-width=\"70px\"\r\n          class=\"login-from\"\r\n      >\r\n        <el-form-item label=\"用户名\" prop=\"uname\">\r\n          <el-input v-model=\"ruleForm.uname\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input\r\n              type=\"password\"\r\n              v-model=\"ruleForm.password\"\r\n              autocomplete=\"off\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div class=\"btnGroup\">\r\n        <el-button\r\n            type=\"primary\"\r\n            @click=\"submitForm('ruleForm')\"\r\n            v-loading=\"loading\"\r\n        >登录</el-button\r\n        >\r\n        <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n        <router-link to=\"/register\">\r\n          <el-button style=\"margin-left: 10px\">注册</el-button>\r\n        </router-link>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        uname: \"\",\r\n        password: \"\",\r\n      },\r\n      rules: {\r\n        uname: [\r\n          { required: true, message: \"用户名不能为空！\", trigger: \"blur\" },\r\n        ],\r\n        password: [\r\n          { required: true, message: \"密码不能为空！\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n      loading: false, // 是否显示加载动画\r\n    };\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      // 验证表单中的账号密码是否有效，因为在上面rules中定义为了必填 required: true\r\n      this.$refs[formName].validate((valid) => {\r\n        // 点击登录后，让登录按钮开始转圈圈（展示加载动画）\r\n        this.loading = true;\r\n        // 如果经过校验，账号密码都不为空，则发送请求到后端登录接口\r\n        if (valid) {\r\n          let _this = this;\r\n          // 使用 axios 将登录信息发送到后端\r\n          this.axios({\r\n            url: \"http://\",               // 请求地址\r\n            method: \"post\",                       // 请求方法\r\n            headers: {                            // 请求头\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            params: {                             // 请求参数\r\n              uname: _this.ruleForm.uname,\r\n              password: _this.ruleForm.password,\r\n            },\r\n          }).then((res) => { // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\r\n            if (res.data.code === \"0\") {  // 当响应的编码为 0 时，说明登录成功\r\n              // 将用户信息存储到sessionStorage中\r\n              sessionStorage.setItem(\"userInfo\", JSON.stringify(res.data.data));\r\n              // 跳转页面到首页\r\n              this.$router.push('/');\r\n              //this.$router.push('/home');\r\n              // 显示后端响应的成功信息\r\n              this.$message({\r\n                message: res.data.msg,\r\n                type: \"success\",\r\n              });\r\n\r\n              this.$router.push('/');\r\n            } else {  // 当响应的编码不为 0 时，说明登录失败\r\n              // 显示后端响应的失败信息\r\n              this.$message({\r\n                message: res.data.msg,\r\n                type: \"warning\",\r\n              });\r\n            }\r\n            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\r\n            _this.loading = false;\r\n            console.log(res);\r\n          });\r\n        } else {  // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\r\n          console.log(\"error submit!!\");\r\n          this.loading = false;\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/*设置背景*/\r\n#login{\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background-image: url(\"../assets/bg1.jpg\");\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n/* 设置登录面板居中，宽度为400px */\r\n.box-card {\r\n  //margin: auto auto;\r\n  position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\r\n  width: 400px;\r\n  background-color:#9aafa4;\r\n}\r\n/* 设置登录面板中的表单居中 */\r\n.login-from {\r\n  margin: auto auto;\r\n}\r\n</style>"],"mappings":";AAyCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE;QACLF,KAAK,EAAE,CACL;UAAEG,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,UAAU;UAAEC,OAAO,EAAE;QAAO,CAAC,CACzD;QACDJ,QAAQ,EAAE,CACR;UAAEE,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,SAAS;UAAEC,OAAO,EAAE;QAAO,CAAC;MAE3D,CAAC;MACDC,OAAO,EAAE,KAAK,CAAE;IAClB,CAAC;EACH,CAAC;;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,QAAQ,EAAE;MACnB;MACA,IAAI,CAACC,KAAK,CAACD,QAAQ,CAAC,CAACE,QAAQ,CAAEC,KAAK,IAAK;QACvC;QACA,IAAI,CAACN,OAAM,GAAI,IAAI;QACnB;QACA,IAAIM,KAAK,EAAE;UACT,IAAIC,KAAI,GAAI,IAAI;UAChB;UACA,IAAI,CAACC,KAAK,CAAC;YACTC,GAAG,EAAE,SAAS;YAAgB;YAC9BC,MAAM,EAAE,MAAM;YAAwB;YACtCC,OAAO,EAAE;cAA6B;cACpC,cAAc,EAAE;YAClB,CAAC;YACDC,MAAM,EAAE;cAA8B;cACpClB,KAAK,EAAEa,KAAK,CAACd,QAAQ,CAACC,KAAK;cAC3BC,QAAQ,EAAEY,KAAK,CAACd,QAAQ,CAACE;YAC3B;UACF,CAAC,CAAC,CAACkB,IAAI,CAAEC,GAAG,IAAK;YAAE;YACjB,IAAIA,GAAG,CAACtB,IAAI,CAACuB,IAAG,KAAM,GAAG,EAAE;cAAG;cAC5B;cACAC,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG,CAACtB,IAAI,CAACA,IAAI,CAAC,CAAC;cACjE;cACA,IAAI,CAAC4B,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;cACtB;cACA;cACA,IAAI,CAACC,QAAQ,CAAC;gBACZxB,OAAO,EAAEgB,GAAG,CAACtB,IAAI,CAAC+B,GAAG;gBACrBC,IAAI,EAAE;cACR,CAAC,CAAC;cAEF,IAAI,CAACJ,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;YACxB,OAAO;cAAG;cACR;cACA,IAAI,CAACC,QAAQ,CAAC;gBACZxB,OAAO,EAAEgB,GAAG,CAACtB,IAAI,CAAC+B,GAAG;gBACrBC,IAAI,EAAE;cACR,CAAC,CAAC;YACJ;YACA;YACAjB,KAAK,CAACP,OAAM,GAAI,KAAK;YACrByB,OAAO,CAACC,GAAG,CAACZ,GAAG,CAAC;UAClB,CAAC,CAAC;QACJ,OAAO;UAAG;UACRW,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;UAC7B,IAAI,CAAC1B,OAAM,GAAI,KAAK;UACpB,OAAO,KAAK;QACd;MACF,CAAC,CAAC;IACJ,CAAC;IACD2B,SAASA,CAACxB,QAAQ,EAAE;MAClB,IAAI,CAACC,KAAK,CAACD,QAAQ,CAAC,CAACyB,WAAW,CAAC,CAAC;IACpC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}