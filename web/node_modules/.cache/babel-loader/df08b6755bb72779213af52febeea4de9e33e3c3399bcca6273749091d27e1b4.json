{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createBlock as _createBlock, withDirectives as _withDirectives, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5c6101e4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"login\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"登录\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"btnGroup\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    class: \"box-card\"\n  }, {\n    default: _withCtx(() => [_hoisted_2, _createVNode(_component_el_form, {\n      model: $data.ruleForm,\n      \"status-icon\": \"\",\n      rules: $data.rules,\n      ref: \"ruleForm\",\n      \"label-position\": \"left\",\n      \"label-width\": \"70px\",\n      class: \"login-from\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_form_item, {\n        label: \"用户名\",\n        prop: \"uname\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $data.ruleForm.uname,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.ruleForm.uname = $event)\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_form_item, {\n        label: \"密码\",\n        prop: \"password\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          type: \"password\",\n          modelValue: $data.ruleForm.password,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.ruleForm.password = $event),\n          autocomplete: \"off\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\", \"rules\"]), _createElementVNode(\"div\", _hoisted_3, [_withDirectives((_openBlock(), _createBlock(_component_el_button, {\n      type: \"primary\",\n      onClick: _cache[2] || (_cache[2] = $event => $options.submitForm('ruleForm'))\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"登录\")]),\n      _: 1 /* STABLE */\n    })), [[_directive_loading, $data.loading]]), _createVNode(_component_el_button, {\n      onClick: _cache[3] || (_cache[3] = $event => $options.resetForm('ruleForm'))\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"重置\")]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_router_link, {\n      to: \"/register\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        style: {\n          \"margin-left\": \"10px\"\n        }\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"注册\")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })])]),\n\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["id","_createElementVNode","class","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","_hoisted_2","_component_el_form","model","$data","ruleForm","rules","ref","_component_el_form_item","label","prop","_component_el_input","uname","$event","type","password","autocomplete","_hoisted_3","_createBlock","_component_el_button","onClick","_cache","$options","submitForm","loading","resetForm","_component_router_link","to","style"],"sources":["D:\\大软\\GiantIsopod-Front-main v2.0\\web\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div id=\"login\">\r\n    <el-card class=\"box-card\">\r\n      <h2>登录</h2>\r\n      <el-form\r\n          :model=\"ruleForm\"\r\n          status-icon\r\n          :rules=\"rules\"\r\n          ref=\"ruleForm\"\r\n          label-position=\"left\"\r\n          label-width=\"70px\"\r\n          class=\"login-from\"\r\n      >\r\n        <el-form-item label=\"用户名\" prop=\"uname\">\r\n          <el-input v-model=\"ruleForm.uname\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input\r\n              type=\"password\"\r\n              v-model=\"ruleForm.password\"\r\n              autocomplete=\"off\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div class=\"btnGroup\">\r\n        <el-button\r\n            type=\"primary\"\r\n            @click=\"submitForm('ruleForm')\"\r\n            v-loading=\"loading\"\r\n        >登录</el-button\r\n        >\r\n        <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n        <router-link to=\"/register\">\r\n          <el-button style=\"margin-left: 10px\">注册</el-button>\r\n        </router-link>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      ruleForm: {\r\n        uname: \"\",\r\n        password: \"\",\r\n      },\r\n      rules: {\r\n        uname: [\r\n          { required: true, message: \"用户名不能为空！\", trigger: \"blur\" },\r\n        ],\r\n        password: [\r\n          { required: true, message: \"密码不能为空！\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n      loading: false, // 是否显示加载动画\r\n    };\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      // 验证表单中的账号密码是否有效，因为在上面rules中定义为了必填 required: true\r\n      this.$refs[formName].validate((valid) => {\r\n        // 点击登录后，让登录按钮开始转圈圈（展示加载动画）\r\n        this.loading = true;\r\n        // 如果经过校验，账号密码都不为空，则发送请求到后端登录接口\r\n        if (valid) {\r\n          let _this = this;\r\n          // 使用 axios 将登录信息发送到后端\r\n          this.axios({\r\n            url: \"/api/user/login\",               // 请求地址\r\n            method: \"post\",                       // 请求方法\r\n            headers: {                            // 请求头\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            params: {                             // 请求参数\r\n              uname: _this.ruleForm.uname,\r\n              password: _this.ruleForm.password,\r\n            },\r\n          }).then((res) => { // 当收到后端的响应时执行该括号内的代码，res 为响应信息，也就是后端返回的信息\r\n            if (res.data.code === \"0\") {  // 当响应的编码为 0 时，说明登录成功\r\n              // 将用户信息存储到sessionStorage中\r\n              sessionStorage.setItem(\"userInfo\", JSON.stringify(res.data.data));\r\n              // 跳转页面到首页\r\n              this.$router.push('/home');\r\n              // 显示后端响应的成功信息\r\n              this.$message({\r\n                message: res.data.msg,\r\n                type: \"success\",\r\n              });\r\n            } else {  // 当响应的编码不为 0 时，说明登录失败\r\n              // 显示后端响应的失败信息\r\n              this.$message({\r\n                message: res.data.msg,\r\n                type: \"warning\",\r\n              });\r\n            }\r\n            // 不管响应成功还是失败，收到后端响应的消息后就不再让登录按钮显示加载动画了\r\n            _this.loading = false;\r\n            console.log(res);\r\n          });\r\n        } else {  // 如果账号或密码有一个没填，就直接提示必填，不向后端请求\r\n          console.log(\"error submit!!\");\r\n          this.loading = false;\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/*设置背景*/\r\n#login{\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background-image: url(\"../assets/bg1.jpg\");\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n/* 设置登录面板居中，宽度为400px */\r\n.box-card {\r\n  //margin: auto auto;\r\n  position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\r\n  width: 400px;\r\n  background-color:#9aafa4;\r\n}\r\n/* 设置登录面板中的表单居中 */\r\n.login-from {\r\n  margin: auto auto;\r\n}\r\n</style>"],"mappings":";;;EACOA,EAAE,EAAC;AAAO;gEAEXC,mBAAA,CAAW,YAAP,IAAE;;EAqBDC,KAAK,EAAC;AAAU;;;;;;;;;uBAvBzBC,mBAAA,CAoCM,OApCNC,UAoCM,GAnCJC,YAAA,CAkCUC,kBAAA;IAlCDJ,KAAK,EAAC;EAAU;sBACvB,MAAW,CAAXK,UAAW,EACXF,YAAA,CAmBUG,kBAAA;MAlBLC,KAAK,EAAEC,KAAA,CAAAC,QAAQ;MAChB,aAAW,EAAX,EAAW;MACVC,KAAK,EAAEF,KAAA,CAAAE,KAAK;MACbC,GAAG,EAAC,UAAU;MACd,gBAAc,EAAC,MAAM;MACrB,aAAW,EAAC,MAAM;MAClBX,KAAK,EAAC;;wBAER,MAEe,CAFfG,YAAA,CAEeS,uBAAA;QAFDC,KAAK,EAAC,KAAK;QAACC,IAAI,EAAC;;0BAC7B,MAA8C,CAA9CX,YAAA,CAA8CY,mBAAA;sBAA3BP,KAAA,CAAAC,QAAQ,CAACO,KAAK;qEAAdR,KAAA,CAAAC,QAAQ,CAACO,KAAK,GAAAC,MAAA;;;UAEnCd,YAAA,CAMeS,uBAAA;QANDC,KAAK,EAAC,IAAI;QAACC,IAAI,EAAC;;0BAC5B,MAIY,CAJZX,YAAA,CAIYY,mBAAA;UAHRG,IAAI,EAAC,UAAU;sBACNV,KAAA,CAAAC,QAAQ,CAACU,QAAQ;qEAAjBX,KAAA,CAAAC,QAAQ,CAACU,QAAQ,GAAAF,MAAA;UAC1BG,YAAY,EAAC;;;;;;2CAIrBrB,mBAAA,CAWM,OAXNsB,UAWM,G,+BAVJC,YAAA,CAKCC,oBAAA;MAJGL,IAAI,EAAC,SAAS;MACbM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAR,MAAA,IAAES,QAAA,CAAAC,UAAU;;wBAErB,MAAE,C,iBAAF,IAAE,E;;+BADYnB,KAAA,CAAAoB,OAAO,E,GAGtBzB,YAAA,CAAwDoB,oBAAA;MAA5CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAR,MAAA,IAAES,QAAA,CAAAG,SAAS;;wBAAc,MAAE,C,iBAAF,IAAE,E;;QAC5C1B,YAAA,CAEc2B,sBAAA;MAFDC,EAAE,EAAC;IAAW;wBACzB,MAAmD,CAAnD5B,YAAA,CAAmDoB,oBAAA;QAAxCS,KAAyB,EAAzB;UAAA;QAAA;MAAyB;0BAAC,MAAE,C,iBAAF,IAAE,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}